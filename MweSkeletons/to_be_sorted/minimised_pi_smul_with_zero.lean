
section not_Pi

universe u

class Zero (Œ± : Type u) where
  zero : Œ±

instance Zero.toOfNat0 {Œ±} [Zero Œ±] : OfNat Œ± (nat_lit 0) where
  ofNat := ‚ÄπZero Œ±‚Ä∫.1

instance Zero.ofOfNat0 {Œ±} [OfNat Œ± (nat_lit 0)] : Zero Œ± where
  zero := 0

class One (Œ± : Type u) where
  one : Œ±

instance One.toOfNat1 {Œ±} [One Œ±] : OfNat Œ± (nat_lit 1) where
  ofNat := ‚ÄπOne Œ±‚Ä∫.1

instance One.ofOfNat1 {Œ±} [OfNat Œ± (nat_lit 1)] : One Œ± where
  one := 1

class MulZeroClass (M‚ÇÄ : Type _) extends Mul M‚ÇÄ, Zero M‚ÇÄ where
  zero_mul : ‚àÄ a : M‚ÇÄ, 0 * a = 0
  mul_zero : ‚àÄ a : M‚ÇÄ, a * 0 = 0

class Semigroup (G : Type u) extends Mul G where
  mul_assoc : ‚àÄ a b c : G, a * b * c = a * (b * c)

class SemigroupWithZero (S‚ÇÄ : Type _) extends Semigroup S‚ÇÄ, MulZeroClass S‚ÇÄ

class MulOneClass (M : Type u) extends One M, Mul M where
  one_mul : ‚àÄ a : M, 1 * a = a
  mul_one : ‚àÄ a : M, a * 1 = a

class MulZeroOneClass (M‚ÇÄ : Type u) extends MulOneClass M‚ÇÄ, MulZeroClass M‚ÇÄ

class Monoid (M : Type u) extends Semigroup M, MulOneClass M where

class MonoidWithZero (M‚ÇÄ : Type u) extends Monoid M‚ÇÄ, MulZeroOneClass M‚ÇÄ, SemigroupWithZero M‚ÇÄ

class SMul (M : Type _) (Œ± : Type _) where
  smul : M ‚Üí Œ± ‚Üí Œ±

class HSMul (Œ± : Type u) (Œ≤ : Type v) (Œ≥ : outParam (Type w)) where
  hSMul : Œ± ‚Üí Œ≤ ‚Üí Œ≥

instance instHSMul (M : Type _) (Œ± : Type _) [SMul M Œ±] : HSMul M Œ± Œ± where
  hSMul := SMul.smul

infixr:73 " ‚Ä¢ " => HSMul.hSMul

class MulAction (Œ± : Type _) (Œ≤ : Type _) [Monoid Œ±] extends SMul Œ± Œ≤ where
  protected one_smul : ‚àÄ b : Œ≤, (1 : Œ±) ‚Ä¢ b = b
  mul_smul : ‚àÄ (x y : Œ±) (b : Œ≤), (x * y) ‚Ä¢ b = x ‚Ä¢ y ‚Ä¢ b

variable (R M)

class MulActionWithZero [MonoidWithZero R] [Zero M] extends MulAction R M where
  smul_zero : ‚àÄ r : R, r ‚Ä¢ (0 : M) = 0
  zero_smul : ‚àÄ m : M, (0 : R) ‚Ä¢ m = 0

class SMulZeroClass (M A : Type _) [Zero A] extends SMul M A where
  smul_zero : ‚àÄ a : M, a ‚Ä¢ (0 : A) = 0

class SMulWithZero [Zero R] [Zero M] extends SMulZeroClass R M where
  zero_smul : ‚àÄ m : M, (0 : R) ‚Ä¢ m = 0

instance (priority := 100) MulActionWithZero.toSMulWithZero [MonoidWithZero R] [Zero M] [m : MulActionWithZero R M] :
    SMulWithZero R M :=
  { m with }



end not_Pi

namespace Pi


variable {I : Type v}

variable {f : I ‚Üí Type w}


universe v w

instance instZero [‚àÄ i, Zero <| f i] : Zero (‚àÄ i : I, f i) :=
  ‚ü®fun _ => 0‚ü©

variable {M}

instance instSMul [‚àÄ i, SMul M <| f i] : SMul M (‚àÄ i : I, f i) :=
  ‚ü®fun s x => fun i => s ‚Ä¢ x i‚ü©

instance smulWithZero [Zero Œ±] [‚àÄ i, Zero (f i)] [‚àÄ i, SMulWithZero Œ± (f i)] :
    SMulWithZero Œ± (‚àÄ i, f i) :=
  { Pi.instSMul with
    -- already this is odd:
    -- smul_zero := fun a => funext fun i => SMulZeroClass.smul_zero a -- "failed to synthesize instance `SMulZeroClass Œ± (f i)`"
    smul_zero := fun a => funext fun i => @SMulZeroClass.smul_zero  _ (f i) _ _ a -- needs the @
    zero_smul := fun _ => funext fun _ => SMulWithZero.zero_smul _ }

instance mulAction (Œ±) {m : Monoid Œ±} [‚àÄ i, MulAction Œ± <| f i] :
    @MulAction Œ± (‚àÄ i : I, f i) m where
  smul := (¬∑ ‚Ä¢ ¬∑)
  mul_smul _ _ _ := funext fun _ => MulAction.mul_smul _ _ _
  one_smul _ := funext fun _ => MulAction.one_smul _

set_option trace.Meta.synthInstance true

set_option maxHeartbeats 10000 -- consider turning trace.Meta.synthInstance to false if you
-- make this number much bigger

set_option trace.Meta.isDefEq true

end Pi
/-



-/

set_option trace.Meta.synthInstance true

set_option maxHeartbeats 10000 -- consider turning trace.Meta.synthInstance to false if you
-- make this number much bigger

set_option trace.Meta.isDefEq true

set_option pp.universes false
--#print MulActionWithZero.{0 0} -- error
--#print MulActionWithZero

--variable (R M : Type) [Monoid R] in
--#check MulAction R M
--#print MulAction


-- why does a human have to make this instance?
instance Pi.mulActionWithZero {I : Type} {V : I ‚Üí Type} (k : Type)
    [MonoidWithZero k] [‚àÄ i, Zero (V i)]
    [‚àÄ i, MulActionWithZero k (V i)] : MulActionWithZero k (‚àÄ i, V i) :=
  { Pi.mulAction k, Pi.smulWithZero with } #exit
    smul_zero := Pi.smulWithZero.smul_zero
    zero_smul := Pi.smulWithZero.zero_smul }

    #print Pi.mulActionWithZero

#exit
-- also works


-- but this seems to be looping
instance mulActionWithZero' (Œ±) [MonoidWithZero Œ±] [‚àÄ i, Zero (f i)]
    [‚àÄ i, MulActionWithZero Œ± (f i)] : MulActionWithZero Œ± (‚àÄ i, f i) :=
  { Pi.mulAction Œ±, Pi.smulWithZero with }


/-
Lean claims to not be able to find `MonoidWithZero Œ±` even though it's explicitly given as an instance.

[Meta.synthInstance] üí• (i : I) ‚Üí SMulWithZero Œ± (f i) ‚ñº
  [] new goal (i : I) ‚Üí SMulWithZero Œ± (f i) ‚ñ∂
  [] üí• apply MulActionWithZero.toSMulWithZero to (i : I) ‚Üí SMulWithZero Œ± (f i) ‚ñº
    [tryResolve] üí• SMulWithZero Œ± (f i) ‚âü SMulWithZero (?m.15131 i) (?m.15132 i) ‚ñº
      [] ‚ùå Zero Œ± ‚ñº
        [] new goal Zero Œ± ‚ñ∂
        [] ‚úÖ apply @MonoidWithZero.toZero to Zero Œ± ‚ñº
          [tryResolve] ‚úÖ Zero Œ± ‚âü Zero Œ±
          [] no instances for MonoidWithZero Œ± ‚ñ∂
        [] ‚úÖ apply @AddMonoid.toZero to Zero Œ± ‚ñ∂
        [] ‚úÖ apply @MulZeroOneClass.toZero to Zero Œ± ‚ñ∂
        [] ‚úÖ apply @MonoidWithZero.toMulZeroOneClass to MulZeroOneClass Œ± ‚ñ∂
        [] ‚úÖ apply @AddZeroClass.toZero to Zero Œ± ‚ñ∂
        [] ‚úÖ apply @AddMonoid.toAddZeroClass to AddZeroClass Œ± ‚ñ∂
        [] ‚úÖ apply @SemigroupWithZero.toZero to Zero Œ± ‚ñ∂
        [] ‚úÖ apply @MonoidWithZero.toSemigroupWithZero to SemigroupWithZero Œ± ‚ñ∂
        [] ‚úÖ apply @MulZeroClass.toZero to Zero Œ± ‚ñ∂
        [] ‚úÖ apply @MulZeroOneClass.toMulZeroClass to MulZeroClass Œ± ‚ñ∂
        [] ‚úÖ apply @SemigroupWithZero.toMulZeroClass to MulZeroClass Œ± ‚ñ∂
        [] ‚úÖ apply @Zero.ofOfNat0 to Zero Œ± ‚ñ∂
        [] ‚úÖ apply @Zero.toOfNat0 to OfNat Œ± 0 ‚ñ∂
      [] ‚úÖ I ‚Üí MonoidWithZero Œ± ‚ñ∂
-/
